#!/usr/bin/env php
<?php
/**
 * This script migrates Whups' share data from the datatree
 * Horde_Share driver to the SQL Horde_Share driver.
 */

if (file_exists(dirname(__FILE__) . '/../../whups/lib/Application.php')) {
    $baseDir = dirname(__FILE__) . '/../';
} else {
    require_once 'PEAR/Config.php';
    $baseDir = PEAR_Config::singleton()
        ->get('horde_dir', null, 'pear.horde.org') . '/whups/';
}
require_once $baseDir . 'lib/Application.php';
Horde_Registry::appInit('whups', array('cli' => true));
$db = $injector->getInstance('Horde_Db_Adapter');

$error_cnt = 0;
$delete_dt_data = false;
$answer = $cli->prompt('Do you want to keep your old datatree data or delete it?', array('Keep', 'Delete'));
if ($answer == 1) {
    $delete_dt_data = true;
}
$answer = $cli->prompt(sprintf("Data will be copied into the new tables, and %s be deleted from the datatree.\n Is this what you want?", (($delete_dt_data) ? 'WILL' : 'WILL NOT')), array('y' => 'Yes', 'n' => 'No'));
if ($answer != 'y') {
    exit;
}

/* Get the share entries */
try {
    $shares_result = $db->selectAll('SELECT datatree_id, datatree_name FROM horde_datatree WHERE group_uid = \'horde.shares.whups\'');
} catch (Horde_Db_Exception $e) {
    die($e->getMessage());
}

$query = 'SELECT attribute_name, attribute_key, attribute_value FROM horde_datatree_attributes WHERE datatree_id = ?';
$maxId = 0;
foreach ($shares_result as $row) {
    $share_id = $row['datatree_id'];
    $share_name = $row['datatree_name'];
    $maxId = max($maxId, $share_id);

    /* Build an array to hold the new row data */
    $data = array(
        'share_id' => $share_id,
        'share_name' => $share_name);

    try {
        $rows = $db->selectAll($query, array($share_id));
    } catch (Horde_Db_Exception $e) {
        die($e->getMessage());
    }
    if (!count($rows)) {
        continue;
    }
    $users = array();
    $groups = array();

    foreach ($rows as $row) {
        if ($row['attribute_name'] == 'perm_groups') {
            /* Group table entry */
            $groups[] = array(
                'share_id' => $data['share_id'],
                'group_uid' => $row['attribute_key'],
                'perm' => $row['attribute_value']);
        } elseif ($row['attribute_name'] == 'perm_users') {
            /* User table entry */
            $users[] = array(
                'share_id' => $data['share_id'],
                'user_uid' => $row['attribute_key'],
                'perm' => $row['attribute_value']);
        } else {
            /* Everything else goes in the main share table */
            switch ($row['attribute_name']) {
            case 'perm_creator':
            case 'perm_default':
            case 'perm_guest':
                $data[$row['attribute_name']] = $row['attribute_value'];
                break;

            case 'owner':
                $data['share_owner'] = $row['attribute_value'];
                break;

            case 'name':
                // Note the key to the $data array is not related to
                // the attribute_name field in the dt_attributes table.
                $data['attribute_name'] = $row['attribute_value'];
                break;

            case 'slug':
                // Note the key to the $data array is not related to
                // the attribute_name field in the dt_attributes table.
                $data['attribute_slug'] = $row['attribute_value'];
                break;
            }
        }
    }

    /* Set flags */
    $data['share_flags'] = 0;
    if (count($users)) {
        $data['share_flags'] |= 1;
    }
    if (count($groups)) {
        $data['share_flags'] |= 2;
    }

    /* Insert the new data */
    $cli->message('Migrating share data for share_id: ' . $share_id, 'cli.message');
    $db->beginDbTransaction();
    $error = false;
    try {
        insertData('whups_shares', $data);
    } catch (Horde_Db_Exception $e) {
        $error = true;
        $cli->message($e->getMessage(), 'cli.error');
    }
    if (count($groups)) {
        foreach ($groups as $group) {
            try {
                insertData('whups_shares_groups', $group);
            } catch (Horde_Db_Exception $e) {
                $error = true;
                $cli->message($e->getMessage(), 'cli.error');
            }
        }
    }
    if (count($users)) {
        foreach ($users as $user) {
            try {
                insertData('whups_shares_users', $user);
            } catch (Horde_Db_Exception $e) {
                $error = true;
                $cli->message($e->getMessage(), 'cli.error');
            }
        }
    }

    /* Delete the datatree data, but ONLY if it was requested */
    if ($delete_dt_data && !$error) {
        $cli->message('DELETING datatree data for share_id: ' . $share_id, 'cli.message');
        $db->delete('DELETE FROM horde_datatree_attributes WHERE datatree_id = ?', array($share_id));
        $db->delete('DELETE FROM horde_datatree WHERE datatree_id = ?', array($share_id));
    }

    /* Cleanup */
    unset($row, $rows, $data, $groups, $users);
    if ($error) {
        $db->rollbackDbTransaction();
        $cli->message('Rollback for share data for share_id: ' . $share_id, 'cli.message');
        ++$error_cnt;
    } else {
        $db->commitDbTransaction();
        $cli->message('Commit for share data for share_id: ' . $share_id, 'cli.message');
    }
}

if ($error_cnt) {
    $cli->message(sprintf("Encountered %u errors. No data was deleted from your database.", $error_cnt));
}
echo "\nDone.\n";

/**
 * Helper function
 */
function insertData($table, $data)
{
    $fields = array_keys($data);
    $values = array_map(array($GLOBALS['db'], 'quote'), array_values($data));

    $GLOBALS['db']->insert('INSERT INTO ' . $table . ' (' . implode(', ', $fields) . ') VALUES (' . implode(', ', $values) . ')');
}
